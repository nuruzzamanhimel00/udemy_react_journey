{"ast":null,"code":"var _jsxFileName = \"E:\\\\laragon\\\\www\\\\udemy_react_journey\\\\14_https_rquest\\\\src\\\\App.js\";\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nfunction App() {\n  const [moviesApi, setMoviesApi] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const fetchMovieHandler = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    //errors\n\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/possts\");\n      console.log(response);\n      if (isNaN(response)) {\n        throw new Error(\"Something is wrong\");\n      }\n      const data = await response.json();\n      console.log(response);\n      data.forEach(d => {\n        d.releaseDate = moment().format(\"MMM Do YY\");\n        d.openingText = d.body;\n      });\n      setMoviesApi([...data]);\n      setIsLoading(false);\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n      // Code to handle the error\n      console.log(\"An error occurred:\", error.message);\n    } finally {\n      // Optional finally block\n      // Code here will always execute regardless of whether an error occurred or not\n    }\n\n    //aync await\n    // const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    // const data = await response.json();\n    // data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    // setMoviesApi([...data]);\n    // setIsLoading(false);\n    // console.log(data);\n    //fetch:-\n    // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    //   .then((response) => {\n    //     return response.json();\n    //   })\n    //   .then((data) => {\n    // data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    // setMoviesApi([...data]);\n    // console.log(data);\n    //   });\n    //axios:-\n    // axios\n    //   .get(\"https://jsonplaceholder.typicode.com/posts\")\n    //   .then((response) => {\n    //     // handle success\n    //     //current date set in array object\n    // response.data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    //     setMoviesApi([...response.data]);\n    //     console.log(response);\n    //   })\n    //   .catch((error) => {\n    //     // handle error\n    //     console.log(error);\n    //   })\n    //   .finally(() => {\n    //     // always executed\n    //   });\n    console.log(\"fetchMovieHandler\");\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, !isLoading && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: moviesApi,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 24\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 19\n    }\n  }, error)));\n}\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","axios","moment","App","moviesApi","setMoviesApi","isLoading","setIsLoading","error","setError","fetchMovieHandler","response","fetch","console","log","isNaN","Error","data","json","forEach","d","releaseDate","format","openingText","body","message","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","movies"],"sources":["E:/laragon/www/udemy_react_journey/14_https_rquest/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [moviesApi, setMoviesApi] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const fetchMovieHandler = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    //errors\n\n    try {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/possts\"\n      );\n      console.log(response);\n      if (isNaN(response)) {\n        throw new Error(\"Something is wrong\");\n      }\n      const data = await response.json();\n\n      console.log(response);\n\n      data.forEach((d) => {\n        d.releaseDate = moment().format(\"MMM Do YY\");\n        d.openingText = d.body;\n      });\n      setMoviesApi([...data]);\n      setIsLoading(false);\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n      // Code to handle the error\n      console.log(\"An error occurred:\", error.message);\n    } finally {\n      // Optional finally block\n      // Code here will always execute regardless of whether an error occurred or not\n    }\n\n    //aync await\n    // const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    // const data = await response.json();\n    // data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    // setMoviesApi([...data]);\n    // setIsLoading(false);\n    // console.log(data);\n    //fetch:-\n    // fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    //   .then((response) => {\n    //     return response.json();\n    //   })\n    //   .then((data) => {\n    // data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    // setMoviesApi([...data]);\n    // console.log(data);\n    //   });\n    //axios:-\n    // axios\n    //   .get(\"https://jsonplaceholder.typicode.com/posts\")\n    //   .then((response) => {\n    //     // handle success\n    //     //current date set in array object\n    // response.data.forEach((d) => {\n    //   d.releaseDate = moment().format(\"MMM Do YY\");\n    //   d.openingText = d.body;\n    // });\n    //     setMoviesApi([...response.data]);\n    //     console.log(response);\n    //   })\n    //   .catch((error) => {\n    //     // handle error\n    //     console.log(error);\n    //   })\n    //   .finally(() => {\n    //     // always executed\n    //   });\n    console.log(\"fetchMovieHandler\");\n  };\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && <MoviesList movies={moviesApi} />}\n        {isLoading && <p>Loading...</p>}\n        {error && <p>{error}</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}